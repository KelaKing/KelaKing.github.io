<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kelaking.github.io</id>
    <title>Gridea</title>
    <updated>2020-07-07T08:09:22.610Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kelaking.github.io"/>
    <link rel="self" href="https://kelaking.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://kelaking.github.io/images/avatar.png</logo>
    <icon>https://kelaking.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Queue 与 Thread 区别]]></title>
        <id>https://kelaking.github.io/post/queue-vs-thread/</id>
        <link href="https://kelaking.github.io/post/queue-vs-thread/">
        </link>
        <updated>2017-03-09T07:59:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sdwebimage源码分析发现">SDWebImage源码分析发现</h1>
<p><a href="https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/Core/SDWebImageCompat.h">SDWebImageCompat.h</a> 中定义了 <code>dispatch_main_async_safe</code> 这么一段宏，history 中有这么个 commit</p>
<pre><code class="language-diff">#define dispatch_main_async_safe(block)\
-    if ([NSThread isMainThread]) {\
+    if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {\
    block();\
} else {\
    dispatch_async(dispatch_get_main_queue(), block);\
}
</code></pre>
<p><code>dispatch_main_async_safe</code> 作用是执行一个 block，如果当前是主线程则直接执行，否则切到主队列中执行。那么问题来了，为什么 <code>[NSThread isMainThread]</code> 不能用来判断是否是主线程呢？<br>
先看下面一段代码：</p>
<pre><code class="language-objc">dispatch_queue_t queue = dispatch_queue_create(&quot;KelaKing&quot;, DISPATCH_QUEUE_SERIAL);
dispatch_sync(queue, ^{
  if ([NSThread isMainThread]) {
    NSLog(@&quot;Main thread&quot;);
  } else {
    NSLog(@&quot;Background thread&quot;);
  }
});
</code></pre>
<p>这段代码在主线程中执行，结果输出 <code>Main thread</code>. 如果放在子线程中执行这段代码会输出 <code>Background thread</code>. 看来 block 在哪执行和 queue 没关系？我们查阅 dispatch_sync 官方文档发现最后一段说明了这个问题：</p>
<blockquote>
<p>As an optimization, this function invokes the block on the current thread when possible.</p>
</blockquote>
<p>大概意思是 block 在哪个线程执行要看 dispatch_sync 它的心情😎<br>
那么问题来了：</p>
<ol>
<li>在主线程执行而不是子线程执行有什么好处吗？</li>
<li>在主线程中同步到主线程执行不会死锁吗？</li>
</ol>
<h1 id="queue-thread">Queue ≠ Thread</h1>
<p><code>Dispatch</code> 官方文档有一段描述：</p>
<blockquote>
<p>Work submitted to dispatch queues are executed on a pool of threads fully managed by the system. No guarantee is made as to the thread on which a task executes.</p>
</blockquote>
<p>大概意思是队列在执行不可描述任务时需要一个线程，从系统管理的线程池中选哪个并不重要，反正关了灯都一样😎<br>
这么看来队列和线程并不对应，commit 中也参照了<a href="http://blog.benjamin-encz.de/post/main-queue-vs-main-thread/">GCD's Main Queue vs. Main Thread</a>. 因为有些 API 不仅要求执行在主线程中，还需要在主队列中。所以 SDWebImage 做出此修改来增加健壮性。dispatch_sync 会阻塞当前队列，并不是阻塞当前线程，所以没有死锁。<br>
GCD 说了可能在当前线程调用是优化那肯定是有好处的：因为系统切换线程是会有性能损耗的，GCD 发现是同步执行会直接将 block 扔到当前线程执行。你问我为什么知道 GCD 这么干？因为我是猜的……源码上万行吓得我直接删了。</p>
<h1 id="dispatch_sync-引发的线程安全思考">dispatch_sync 引发的线程安全思考</h1>
<p>其实除了 <code>dispatch_main_async_safe</code> 宏之前还有 <code>dispatch_main_sync_safe</code>. 删除该宏是因为有可能会发生死锁。<a href="https://www.raywenderlich.com/5370-grand-central-dispatch-tutorial-for-swift-4-part-1-2">深入理解 GCD</a> 也提到不建议在串行队列中使用 dispatch_sync.</p>
]]></content>
    </entry>
</feed>